\documentclass[12pt, a4paper]{exam}
\usepackage[OT1]{fontenc}
\usepackage{Sweave}
\SweaveOpts{echo=FALSE}
\usepackage{hyperref}            
\hypersetup{pdfpagelayout=SinglePage}
\setkeys{Gin}{width=0.8\textwidth}
\pagestyle{headandfoot} % every page has a header and footer
\header{}{Facebook popularity prediction}{}
\footer{}{Page \thepage\ of \numpages}{}

\begin{document}

<<echo = false>>=
library(ggplot2)
library(reshape2)
library(caret)

rawData <- read.csv('data/data.csv', row.names = 1, header = FALSE, col.names = c("id", paste("h", 1:168, sep = "")))
@

<<echo = true>>=
summary(rawData[, c(24, 72, 168)])
@

<< fig = true, echo = false>>=
ggplot(rawData, aes(x = rawData[, 168])) +
  labs(title = "Distribution of v(168)", x = "Number of views in 168h") +
  geom_histogram(aes(y=..density..), bins = 50, colour="black", fill="white")
@

<< fig = true, echo = false>>=
rawData$log168 <- log(rawData[, 168])
ggplot(rawData, aes(x = rawData$log168)) +
  labs(title = "Distribution of log(v(168))", x = "Number of views in 168h") +
  geom_histogram(aes(y=..density..), bins = 50, colour="black", fill="white")
@

<<>>=
# A function that removes outliers from data frame according to
# 3-sigma rule, based on column specified with colIndex
removeOutliers <- function(dataFrame, colIndex) {
  standardDeviation <- sd(dataFrame[, colIndex])
  sigma3.max <- mean(dataFrame[, colIndex]) + 3 * standardDeviation
  sigma3.min <- mean(dataFrame[, colIndex]) - 3 * standardDeviation
  
  return(dataFrame[dataFrame[, colIndex] > sigma3.min &
                     dataFrame[, colIndex] < sigma3.max, ])
}
dataWithoutOutliers <- removeOutliers(rawData, "log168")
@

<<fig = true, echo = false>>=
ggplot(dataWithoutOutliers, aes(x = dataWithoutOutliers$log168)) +
  labs(title = "Distribution of log(v(168)) without outliers", x = "Number of views in 168h") +
  geom_histogram(aes(y=..density..), bins = 50, colour="black", fill="white") +
  stat_function(colour="red", fun=dnorm, args=list(mean=mean(dataWithoutOutliers$log168), sd=sd(dataWithoutOutliers$log168)))
@

<<>>=
regressionParametersIndices <- 1:24
sapply(dataWithoutOutliers[, regressionParametersIndices], function (x) {
  cor(x, dataWithoutOutliers$log168)
})
@

<<echo = false>>=
# Split data to train and test
inTraining <- createDataPartition(dataWithoutOutliers$log168, p = .9,
                                  list = FALSE)
trainData <- dataWithoutOutliers[inTraining, ]
testData <- dataWithoutOutliers[-inTraining, ]

# Initialize the data frame for results
results <- data.frame(time = regressionParametersIndices)
@

<<>>=
rMse <- function(trueValue, predictedValue) {
  return(mean((predictedValue / trueValue - 1) ^ 2))
}
@

<<>>=
# For each reference time create the single parameter model and calculate rMSE
results$singleInput <- sapply(regressionParametersIndices, function(x) {
  model <-
    lm(as.formula(paste("log168 ~", colnames(trainData)[x])), data = trainData)
  predicted <- predict(model, testData)
  return(rMse(testData$log168, predicted))
})
@

<<>>=
# The same for model built on all views preceding the reference time
results$multipleInputs <- sapply(regressionParametersIndices, function(x) {
  model <-
    lm(as.formula(paste(
      "log168 ~", paste(colnames(trainData)[1:x], collapse = "+")
    )), data = trainData)
  predicted <- predict(model, testData)
  return(rMse(testData$log168, predicted))
})
@

<<fig = true, echo = false>>=
meltedResults <- melt(results, id = "time")
ggplot(data = meltedResults,
       aes(
         x = time,
         y = value,
         group = variable,
         colour = variable,
         shape = variable
       )) +
  labs(y = "mRSE",
       x = "Reference time (n)") +
  geom_point() +
  geom_line()
@

\end{document}